// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Marshal from "../shared/Marshal.js";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.js";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.js";

var to = Json_Decode$JsonCombinators.object(function (fields) {
      return {
              name: fields.required("name", Json_Decode$JsonCombinators.string),
              display: fields.required("display", Json_Decode$JsonCombinators.string),
              page: fields.required("page", Json_Decode$JsonCombinators.$$int)
            };
    });

function from(o) {
  return {
          name: o.name,
          display: o.display,
          page: o.page
        };
}

var Converter_category_param = Marshal.Make({
      to: to,
      from: from
    });

var to$1 = Json_Decode$JsonCombinators.object(function (fields) {
      return {
              id: fields.required("id", Json_Decode$JsonCombinators.$$int),
              name: fields.required("name", Json_Decode$JsonCombinators.string),
              display: fields.required("display", Json_Decode$JsonCombinators.string),
              page: fields.required("page", Json_Decode$JsonCombinators.$$int),
              sort_by: fields.required("sort_by", Json_Decode$JsonCombinators.string)
            };
    });

function from$1(o) {
  return {
          id: o.id,
          name: o.name,
          display: o.display,
          page: o.page,
          sort_by: o.sort_by
        };
}

var Converter_genre_param = Marshal.Make({
      to: to$1,
      from: from$1
    });

var to$2 = Json_Decode$JsonCombinators.object(function (fields) {
      return {
              query: fields.required("query", Json_Decode$JsonCombinators.string),
              page: fields.required("page", Json_Decode$JsonCombinators.$$int)
            };
    });

function from$2(o) {
  return {
          query: o.query,
          page: o.page
        };
}

var Converter_search_param = Marshal.Make({
      to: to$2,
      from: from$2
    });

function useQueryParams(param) {
  var url = RescriptReactRouter.useUrl(undefined, undefined);
  var match = url.path;
  var match$1 = url.search;
  var queryParam;
  if (match) {
    switch (match.hd) {
      case "genre" :
          if (match.tl) {
            queryParam = {
              TAG: /* Invalid */5,
              _0: "Invalid Route"
            };
          } else {
            var p = Converter_genre_param.parse(match$1);
            queryParam = p.TAG === /* Ok */0 ? ({
                  TAG: /* Genre */1,
                  _0: p._0
                }) : ({
                  TAG: /* Invalid */5,
                  _0: p._0
                });
          }
          break;
      case "search" :
          if (match.tl) {
            queryParam = {
              TAG: /* Invalid */5,
              _0: "Invalid Route"
            };
          } else {
            var p$1 = Converter_search_param.parse(match$1);
            queryParam = p$1.TAG === /* Ok */0 ? ({
                  TAG: /* Search */2,
                  _0: p$1._0
                }) : ({
                  TAG: /* Invalid */5,
                  _0: p$1._0
                });
          }
          break;
      default:
        queryParam = {
          TAG: /* Invalid */5,
          _0: "Invalid Route"
        };
    }
  } else if (match$1 === "") {
    queryParam = {
      TAG: /* Category */0,
      _0: {
        name: "popular",
        display: "Popular",
        page: 1
      }
    };
  } else {
    var p$2 = Converter_category_param.parse(match$1);
    queryParam = p$2.TAG === /* Ok */0 ? ({
          TAG: /* Category */0,
          _0: p$2._0
        }) : ({
          TAG: /* Invalid */5,
          _0: p$2._0
        });
  }
  var setQueryParam = function (params) {
    switch (params.TAG | 0) {
      case /* Category */0 :
          return RescriptReactRouter.push("/?" + new URLSearchParams(Converter_category_param.stringfy(params._0)).toString());
      case /* Genre */1 :
          return RescriptReactRouter.push("/genre?" + new URLSearchParams(Converter_genre_param.stringfy(params._0)).toString());
      case /* Search */2 :
          return RescriptReactRouter.push("/search?" + new URLSearchParams(Converter_search_param.stringfy(params._0)).toString());
      case /* Movie */3 :
          return RescriptReactRouter.push("/movie/" + String(params._0) + "");
      case /* Person */4 :
      case /* Invalid */5 :
          return ;
      
    }
  };
  return [
          queryParam,
          setQueryParam
        ];
}

export {
  Converter_category_param ,
  Converter_genre_param ,
  Converter_search_param ,
  useQueryParams ,
}
/* Converter_category_param Not a pure module */
