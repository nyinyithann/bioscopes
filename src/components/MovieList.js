// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Links from "../shared/Links.js";
import * as React from "react";
import * as Rating from "./Rating.js";
import * as FilterBox from "./FilterBox.js";
import * as GenreList from "./GenreList.js";
import * as Js_option from "rescript/lib/es6/js_option.js";
import * as LazyImage from "./LazyImage.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as ErrorDialog from "./ErrorDialog.js";
import * as LoadingDialog from "./LoadingDialog.js";
import * as UrlQueryParam from "../routes/UrlQueryParam.js";
import * as MoviesProvider from "../providers/MoviesProvider.js";
import * as Solid from "@heroicons/react/solid";

function string(prim) {
  return prim;
}

function array(prim) {
  return prim;
}

function MovieList$Poster(Props) {
  var id = Props.id;
  var media_type = Props.media_type;
  var title = Props.title;
  var poster_path = Props.poster_path;
  var vote_average = Props.vote_average;
  var release_date = Props.release_date;
  var match = UrlQueryParam.useQueryParams(undefined);
  var setQueryParam = match[1];
  var imgLink = poster_path !== undefined ? Links.getPosterImageW342Link(poster_path) : "";
  var title$1 = Js_option.getWithDefault("", title);
  var releaseYear = release_date !== undefined ? release_date.substring(0, 4) : "";
  var handleClick = function (e) {
    e.preventDefault();
    if (media_type !== undefined) {
      return Curry._1(setQueryParam, {
                  TAG: /* Movie */3,
                  _0: {
                    id: id,
                    media_type: media_type
                  }
                });
    } else {
      return Curry._1(setQueryParam, {
                  TAG: /* Movie */3,
                  _0: {
                    id: id,
                    media_type: "movie"
                  }
                });
    }
  };
  return React.createElement("button", {
              className: "relative flex flex-col flex-shrink-0 gap-2 transition ease-linear w-[10rem] h-[22rem] sm:w-[15rem] sm:h-[28rem] items-center justify-start hover:border-[1px] hover:border-slate-200 transform duration-300 hover:-translate-y-1 hover:shadow-2xl hover:scale-105 group hover:bg-gradient-to-r hover:from-teal-400 hover:to-blue-400 hover:rounded-md",
              type: "button",
              onClick: handleClick
            }, React.createElement(LazyImage.make, {
                  className: "flex-shrink-0 group-hover:saturate-150 border-[2px] border-slate-200 rounded-md",
                  lazyLoadEnabled: true,
                  lazyLoadOffset: 50,
                  width: 160,
                  height: 240,
                  sm_width: 240,
                  sm_height: 352,
                  sm_mediaQuery: "(max-width: 600px)",
                  alt: "A poster",
                  placeholderPath: Links.placeholderImage,
                  src: imgLink
                }), React.createElement("p", {
                  className: "" + (
                    title$1.length > 50 ? "text-[0.7rem]" : "text-[0.95rem]"
                  ) + " break-words transform duration-300 group-hover:text-yellow-200 pt-[0.3rem] flex justify-center items-center text-center text-900"
                }, title$1), React.createElement(Rating.make, {
                  ratingValue: vote_average
                }), releaseYear.length === 4 ? React.createElement("div", {
                    className: "absolute top-[0.5rem] right-[0.5rem] text-[0.8rem] bg-700/60 text-slate-50 px-[4px] py-[1px] rounded-sm"
                  }, releaseYear) : null);
}

var Poster = {
  make: MovieList$Poster
};

function MovieList(Props) {
  var match = UrlQueryParam.useQueryParams(undefined);
  var setQueryParam = match[1];
  var queryParam = match[0];
  var match$1 = MoviesProvider.useMoviesContext(undefined);
  var clearAll = match$1.clearAll;
  var loadMovies = match$1.loadMovies;
  var error = match$1.error;
  var loading = match$1.loading;
  var movies = match$1.movies;
  var movieList = Js_option.getWithDefault([], movies.results);
  var currentPage = Js_option.getWithDefault(0, movies.page);
  var totalPages = Js_option.getWithDefault(0, movies.total_pages);
  var viewingTitleRef = React.useRef("");
  var isGenreRef = {
    contents: false
  };
  React.useMemo((function () {
          switch (queryParam.TAG | 0) {
            case /* Category */0 :
                var display = queryParam._0.display;
                if (display.toLowerCase() === "upcoming") {
                  var ds = movies.dates;
                  var msg;
                  if (ds !== undefined) {
                    var match = ds.maximum;
                    var match$1 = ds.minimum;
                    msg = match !== undefined && match$1 !== undefined ? "" + display + " (" + match$1 + " ~ " + match + ")" : display;
                  } else {
                    msg = display;
                  }
                  viewingTitleRef.current = msg;
                } else {
                  viewingTitleRef.current = display;
                }
                window.document.title = display + " Movies";
                isGenreRef.contents = false;
                return ;
            case /* Genre */1 :
                var display$1 = queryParam._0.display;
                viewingTitleRef.current = display$1;
                window.document.title = display$1 + " Movies";
                isGenreRef.contents = true;
                return ;
            case /* Search */2 :
                viewingTitleRef.current = "Search: '" + queryParam._0.query + "'";
                window.document.title = viewingTitleRef.current;
                isGenreRef.contents = false;
                return ;
            default:
              isGenreRef.contents = false;
              return ;
          }
        }), [movies]);
  React.useEffect((function () {
          var controller = new AbortController();
          switch (queryParam.TAG | 0) {
            case /* Category */0 :
                var match = queryParam._0;
                Curry._2(loadMovies, {
                      TAG: /* Category */0,
                      _0: {
                        name: match.name,
                        display: match.display,
                        page: match.page
                      }
                    }, controller.signal);
                break;
            case /* Genre */1 :
                var match$1 = queryParam._0;
                Curry._2(loadMovies, {
                      TAG: /* Genre */1,
                      _0: {
                        id: match$1.id,
                        name: match$1.name,
                        display: match$1.display,
                        page: match$1.page,
                        sort_by: match$1.sort_by
                      }
                    }, controller.signal);
                break;
            case /* Search */2 :
                var match$2 = queryParam._0;
                Curry._2(loadMovies, {
                      TAG: /* Search */2,
                      _0: {
                        query: match$2.query,
                        page: match$2.page
                      }
                    }, controller.signal);
                break;
            default:
              
          }
          return (function (param) {
                    controller.abort("Cancel the request");
                  });
        }), []);
  var loadPage = function (n) {
    switch (queryParam.TAG | 0) {
      case /* Category */0 :
          var match = queryParam._0;
          return Curry._1(setQueryParam, {
                      TAG: /* Category */0,
                      _0: {
                        name: match.name,
                        display: match.display,
                        page: match.page + n | 0
                      }
                    });
      case /* Genre */1 :
          var match$1 = queryParam._0;
          return Curry._1(setQueryParam, {
                      TAG: /* Genre */1,
                      _0: {
                        id: match$1.id,
                        name: match$1.name,
                        display: match$1.display,
                        page: match$1.page + n | 0,
                        sort_by: match$1.sort_by
                      }
                    });
      case /* Search */2 :
          var match$2 = queryParam._0;
          return Curry._1(setQueryParam, {
                      TAG: /* Search */2,
                      _0: {
                        query: match$2.query,
                        page: match$2.page + n | 0
                      }
                    });
      default:
        return ;
    }
  };
  var onClose = function (arg) {
    if (arg) {
      return Curry._1(clearAll, undefined);
    }
    
  };
  return React.createElement("div", {
              className: "flex flex-col bg-white"
            }, React.createElement("div", {
                  className: "flex items-center p-1 pl-4 sticky top-[3.4rem] z-50 shadlow-md flex-shrink-0 bg-white border-t-[2px] border-slate-200"
                }, React.createElement("div", undefined, React.createElement(GenreList.make, {})), React.createElement("div", {
                      className: "" + (
                        isGenreRef.contents ? "flex" : "hidden"
                      ) + " justify-start ml-auto pr-4"
                    }, React.createElement(FilterBox.make, {}))), React.createElement("div", {
                  className: "w-full h-full flex flex-1 flex-wrap p-1 pt-4 gap-[1rem] sm:gap-[1.4rem] justify-center items-center px-[1rem] sm:px-[2rem] bg-white",
                  id: "movie-list-here"
                }, Belt_Array.map(movieList, (function (m) {
                        return React.createElement(MovieList$Poster, {
                                    id: m.id.toString(),
                                    media_type: m.media_type,
                                    title: m.title,
                                    poster_path: m.poster_path,
                                    vote_average: m.vote_average,
                                    release_date: m.release_date,
                                    key: m.id.toString()
                                  });
                      }))), React.createElement("div", {
                  className: "flex gap-2 px-4 pt-[2rem]"
                }, currentPage > 1 ? React.createElement("button", {
                        className: "flex gap-2 px-4 py-2 border-[1px] border-300 bg-300 text-900 rounded hover:bg-400 hover:text-50 group",
                        type: "button",
                        onClick: (function (param) {
                            loadPage(-1);
                          })
                      }, React.createElement(Solid.ArrowLeftIcon, {
                            className: "h-6 w-6 fill-klor-900 group-hover:fill-klor-50"
                          }), React.createElement("span", undefined, "Page " + (currentPage - 1 | 0).toString() + " ")) : null, currentPage < totalPages ? React.createElement("button", {
                        className: "flex gap-2 px-4 py-2 border-[1px] border-300 bg-300 text-900 rounded hover:bg-400 hover:text-50 group ml-auto",
                        type: "button",
                        onClick: (function (param) {
                            loadPage(1);
                          })
                      }, React.createElement("span", undefined, "Page " + (currentPage + 1 | 0).toString() + " "), React.createElement(Solid.ArrowRightIcon, {
                            className: "h-6 w-6 fill-klor-900 group-hover:fill-klor-50"
                          })) : null), React.createElement(ErrorDialog.make, {
                  isOpen: error.length > 0,
                  errorMessage: error,
                  onClose: onClose
                }), loading ? React.createElement(LoadingDialog.make, {
                    isOpen: loading,
                    onClose: onClose
                  }) : null);
}

var make = MovieList;

export {
  string ,
  array ,
  Poster ,
  make ,
}
/* react Not a pure module */
