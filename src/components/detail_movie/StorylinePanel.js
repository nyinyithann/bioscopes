// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Imdb from "../social_media/Imdb.js";
import * as Util from "../../shared/Util.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Links from "../../shared/Links.js";
import * as React from "react";
import * as Twitter from "../social_media/Twitter.js";
import * as Facebook from "../social_media/Facebook.js";
import * as Instagram from "../social_media/Instagram.js";
import * as LazyImage from "../LazyImage.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as MovieModel from "../../models/MovieModel.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as WebsiteLink from "../social_media/WebsiteLink.js";
import * as UrlQueryParam from "../../routes/UrlQueryParam.js";

function string(prim) {
  return prim;
}

function $$int(prim) {
  return prim;
}

function $$float(prim) {
  return prim;
}

function array(prim) {
  return prim;
}

function getFirstPosterImage(movie) {
  return Belt_Array.get(Belt_Option.getWithDefault(Belt_Option.getWithDefault(Belt_Option.map(movie.images, (function (imgs) {
                            return imgs.posters;
                          })), []), []), 0);
}

var labelStyle = "w-[12rem] flex items-center bg-50 pl-1 pr-2 rounded-r-full mb-1";

function StorylinePanel$Pair(Props) {
  var title = Props.title;
  var value = Props.value;
  if (Util.isEmptyString(value)) {
    return null;
  } else {
    return React.createElement("dl", {
                className: "flex w-full gap-4"
              }, React.createElement("dt", {
                    className: labelStyle
                  }, Util.toStringElement(title)), React.createElement("dd", {
                    className: "w-full"
                  }, Util.toStringElement(value)));
  }
}

var Pair = {
  make: StorylinePanel$Pair
};

function getDirectorIdAndName(movie) {
  try {
    return Belt_Option.getExn(Belt_Option.flatMap(Belt_Option.flatMap(movie.credits, (function (c) {
                          return Belt_Option.flatMap(c.crew, (function (crews) {
                                        return Belt_Array.getBy(crews, (function (crew) {
                                                      return Belt_Option.getWithDefault(crew.job, "").toLowerCase() === "director";
                                                    }));
                                      }));
                        })), (function (d) {
                      return [
                              Belt_Option.getWithDefault(d.id, 0),
                              Belt_Option.getWithDefault(d.name, "")
                            ];
                    })));
  }
  catch (exn){
    return [
            0,
            ""
          ];
  }
}

function StorylinePanel$DirectorLink(Props) {
  var id = Props.id;
  var name = Props.name;
  var param = {
    id: id.toString()
  };
  var seg = "/person?" + new URLSearchParams(UrlQueryParam.Converter_person_param.stringfy(param)).toString();
  if (id !== 0) {
    return React.createElement("div", {
                className: "flex w-full gap-4"
              }, React.createElement("span", {
                    className: labelStyle
                  }, Util.toStringElement("Director")), React.createElement("a", {
                    className: "w-full text-base font-normal span-link",
                    href: seg,
                    rel: "noopener noreferrer"
                  }, Util.toStringElement(name)));
  } else {
    return null;
  }
}

var DirectorLink = {
  make: StorylinePanel$DirectorLink
};

function getSpokenLanguages(movie) {
  var spls = Belt_Array.reduce(Belt_Option.getWithDefault(Belt_Option.flatMap(movie.spoken_languages, (function (sls) {
                  return Belt_Array.map(sls, (function (sl) {
                                return Belt_Option.getWithDefault(sl.name, "");
                              }));
                })), []), "", (function (x, y) {
          return x + ", " + y;
        }));
  if (spls.startsWith(", ")) {
    return spls.substr(2);
  } else {
    return spls;
  }
}

function getProductionCompanies(movie) {
  var names = Belt_Array.reduce(Belt_Option.getWithDefault(Belt_Option.flatMap(movie.production_companies, (function (cmps) {
                  return Belt_Array.map(cmps, (function (cmp) {
                                return Belt_Option.getWithDefault(cmp.name, "");
                              }));
                })), []), "", (function (x, y) {
          return x + ", " + y;
        }));
  if (names.startsWith(", ")) {
    return names.substr(2);
  } else {
    return names;
  }
}

function getGenres(movie) {
  var gns = movie.genres;
  if (gns !== undefined) {
    return Belt_Array.map(gns, (function (g) {
                  return [
                          g.id,
                          g.name
                        ];
                }));
  } else {
    return [];
  }
}

function StorylinePanel$GenreLinks(Props) {
  var links = Props.links;
  var match = UrlQueryParam.useQueryParams(undefined);
  var setQueryParam = match[1];
  if (Util.isEmptyArray(links)) {
    return null;
  } else {
    return React.createElement("div", {
                className: "flex w-full gap-4"
              }, React.createElement("span", {
                    className: labelStyle
                  }, Util.toStringElement("Genres")), React.createElement("div", {
                    className: "w-full flex flex-wrap items-center gap-2"
                  }, Belt_Array.map(links, (function (param) {
                          var name = param[1];
                          var id = param[0];
                          return React.createElement("span", {
                                      key: Util.itos(id),
                                      className: "span-link",
                                      onClick: (function (e) {
                                          e.preventDefault();
                                          Curry._1(setQueryParam, {
                                                TAG: /* Genre */1,
                                                _0: {
                                                  id: id,
                                                  name: name,
                                                  display: name,
                                                  page: 1,
                                                  sort_by: MovieModel.popularity.id
                                                }
                                              });
                                        })
                                    }, Util.toStringElement(name));
                        }))));
  }
}

var GenreLinks = {
  make: StorylinePanel$GenreLinks
};

function StorylinePanel(Props) {
  var movie = Props.movie;
  var overviewRef = React.useRef(undefined);
  React.useMemo((function () {
          var storyline = Util.getOrEmptyString(movie.overview);
          var releasedDate = Util.toLocaleString(movie.release_date, undefined, undefined);
          var x = movie.runtime;
          var runtime;
          if (x !== undefined && x !== 0) {
            var t = x | 0;
            runtime = "" + Util.itos(t / 60 | 0) + "h " + Util.itos(t % 60) + "min";
          } else {
            runtime = "";
          }
          var match = getDirectorIdAndName(movie);
          var budget = Util.getOrFloatZero(movie.budget).toLocaleString("en-GB");
          var revenue = Util.getOrFloatZero(movie.revenue).toLocaleString("en-GB");
          var status = Util.getOrEmptyString(movie.status);
          var imdbId = Util.getOrEmptyString(Belt_Option.map(movie.external_ids, (function (x) {
                      return Util.getOrEmptyString(x.imdb_id);
                    })));
          var twitterId = Util.getOrEmptyString(Belt_Option.map(movie.external_ids, (function (x) {
                      return Util.getOrEmptyString(x.twitter_id);
                    })));
          var facebookId = Util.getOrEmptyString(Belt_Option.map(movie.external_ids, (function (x) {
                      return Util.getOrEmptyString(x.facebook_id);
                    })));
          var instagramId = Util.getOrEmptyString(Belt_Option.map(movie.external_ids, (function (x) {
                      return Util.getOrEmptyString(x.instagram_id);
                    })));
          var websiteLink = Util.getOrEmptyString(movie.homepage);
          var genreLinks = getGenres(movie);
          var spokenLanguages = getSpokenLanguages(movie);
          var productionCompanies = getProductionCompanies(movie);
          overviewRef.current = {
            storyline: storyline,
            releasedDate: releasedDate,
            runtime: runtime,
            budget: budget,
            revenue: revenue,
            status: status,
            imdbId: imdbId,
            twitterId: twitterId,
            facebookId: facebookId,
            instagramId: instagramId,
            websiteLink: websiteLink,
            directorId: match[0],
            directorName: match[1],
            genreLinks: genreLinks,
            spokenLanguages: spokenLanguages,
            productionCompanies: productionCompanies
          };
        }), [movie]);
  var overview = overviewRef.current;
  if (overview === undefined) {
    return null;
  }
  var img = getFirstPosterImage(movie);
  var tmp;
  if (img !== undefined) {
    var seg = Util.getOrEmptyString(img.file_path);
    tmp = Util.isEmptyString(seg) ? null : React.createElement(LazyImage.make, {
            className: "h-full border-slate-200 rounded-md shadow-gray-300 shadow-md md:min-w-[20rem] w-auto",
            placeholderPath: Links.placeholderImage,
            alt: "poster image",
            src: Links.getPosterImage_W370_H556_bestv2Link(seg),
            lazyHeight: 456,
            lazyOffset: 50
          });
  } else {
    tmp = null;
  }
  return React.createElement("div", {
              className: "flex w-full pl-2 pt-2"
            }, React.createElement("div", {
                  className: "hidden md:flex pr-8 items-start md:items-center md:justify-center justify-start"
                }, tmp), React.createElement("div", {
                  className: "flex flex-col w-full prose"
                }, React.createElement("div", {
                      className: "flex flex-col w-full gap-1"
                    }, React.createElement("span", {
                          className: "text-[1.2rem] font-semibold text-900"
                        }, "Storyline"), React.createElement("span", {
                          className: "break-words w-full flex"
                        }, overview.storyline)), React.createElement("div", {
                      className: "flex flex-col w-full pt-4"
                    }, React.createElement(StorylinePanel$Pair, {
                          title: "Released",
                          value: overview.releasedDate
                        }), React.createElement(StorylinePanel$Pair, {
                          title: "Runtime",
                          value: overview.runtime
                        }), React.createElement(StorylinePanel$DirectorLink, {
                          id: overview.directorId,
                          name: overview.directorName
                        }), overview.budget !== "" ? null : React.createElement(StorylinePanel$Pair, {
                            title: "Budget",
                            value: "$" + overview.budget + ""
                          }), overview.revenue !== "" ? null : React.createElement(StorylinePanel$Pair, {
                            title: "Revenue",
                            value: "$" + overview.revenue + ""
                          }), React.createElement(StorylinePanel$GenreLinks, {
                          links: overview.genreLinks
                        }), React.createElement(StorylinePanel$Pair, {
                          title: "Status",
                          value: overview.status
                        }), React.createElement(StorylinePanel$Pair, {
                          title: "Language",
                          value: overview.spokenLanguages
                        }), React.createElement(StorylinePanel$Pair, {
                          title: "Production",
                          value: overview.productionCompanies
                        })), React.createElement("div", {
                      className: "flex w-full justify-start gap-[1.4rem] pt-4"
                    }, React.createElement(Twitter.make, {
                          id: overview.twitterId,
                          className: "h-6 w-6 fill-klor-500 hover:fill-klor-900"
                        }), React.createElement(Facebook.make, {
                          id: overview.facebookId,
                          className: "h-6 w-6 fill-klor-500 hover:fill-klor-900"
                        }), React.createElement(Instagram.make, {
                          id: overview.instagramId,
                          className: "h-6 w-6 fill-klor-500 hover:fill-klor-900"
                        }), React.createElement(Imdb.make, {
                          id: overview.imdbId,
                          type_: "title",
                          className: "h-6 w-6 fill-klor-500 hover:fill-klor-900"
                        }), React.createElement(WebsiteLink.make, {
                          link: overview.websiteLink,
                          className: "h-6 w-6 fill-klor-50 stroke-klor-500 hover:fill-klor-900"
                        }))));
}

var make = StorylinePanel;

export {
  string ,
  $$int ,
  $$float ,
  array ,
  getFirstPosterImage ,
  labelStyle ,
  Pair ,
  getDirectorIdAndName ,
  DirectorLink ,
  getSpokenLanguages ,
  getProductionCompanies ,
  getGenres ,
  GenreLinks ,
  make ,
}
/* Imdb Not a pure module */
