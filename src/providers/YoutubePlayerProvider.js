// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";

var initialState = {
  url: "",
  playing: false
};

function initialContextValue_play(param) {
  
}

function initialContextValue_stop(param) {
  
}

var initialContextValue = {
  videoPlayState: initialState,
  play: initialContextValue_play,
  stop: initialContextValue_stop
};

var context = React.createContext(initialContextValue);

var provider = context.Provider;

function YoutubePlayerProvider$VideoPlayerContext$Provider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider, {
              value: value,
              children: children
            });
}

var Provider = {
  provider: provider,
  make: YoutubePlayerProvider$VideoPlayerContext$Provider
};

var VideoPlayerContext = {
  initialContextValue: initialContextValue,
  context: context,
  Provider: Provider
};

function reducer(param, action) {
  if (action) {
    return {
            url: action._0,
            playing: true
          };
  } else {
    return {
            url: "",
            playing: false
          };
  }
}

function YoutubePlayerProvider(Props) {
  var children = Props.children;
  var match = React.useReducer(reducer, initialState);
  var dispatch = match[1];
  var playCallback = React.useCallback((function (url) {
          Curry._1(dispatch, /* Play */{
                _0: url
              });
        }), [dispatch]);
  var stopCallback = React.useCallback((function (param) {
          Curry._1(dispatch, /* Stop */0);
        }), [dispatch]);
  var value_videoPlayState = match[0];
  var value = {
    videoPlayState: value_videoPlayState,
    play: playCallback,
    stop: stopCallback
  };
  return React.createElement(YoutubePlayerProvider$VideoPlayerContext$Provider, {
              value: value,
              children: children
            });
}

function useVideoPlayerContext(param) {
  return React.useContext(context);
}

var make = YoutubePlayerProvider;

export {
  initialState ,
  VideoPlayerContext ,
  reducer ,
  make ,
  useVideoPlayerContext ,
}
/* context Not a pure module */
